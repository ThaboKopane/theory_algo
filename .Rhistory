plot(dem)
files
files <- list.files(path="../sd_maps", pattern="*.tif", full.names=TRUE, recursive=FALSE)
files
for (file in files){
new_file = unlist(strsplit(file, split = '/', fixed = T))[3]
file_nu = unlist(strsplit(new_file, split='.', fixed = T))[1]
print(file)
}
for (file in files){
new_file = unlist(strsplit(file, split = '/', fixed = T))[3]
file_nu = unlist(strsplit(new_file, split='.', fixed = T))[1]
print(new_file)
}
print(file_nu)
for (file in maps){
new_file = unlist(strsplit(file, split = '/', fixed = T))[3]
file_nu = unlist(strsplit(new_file, split='.', fixed = T))[1]
print(file)
}
apply(maps, na.rm=T)
maps <- as.matrix.data.frame(read.csv("maps.csv"))
maps <- na.omit(maps)
dem=raster(maps[1,1])
maps <- as.matrix.data.frame(read.csv("maps.csv"))
dem=raster(maps[1,1])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
dem = merge(dem,t)
}
}
maps <- na.omit(maps)
for (file in maps){
new_file = unlist(strsplit(file, split = '/', fixed = T))[3]
file_nu = unlist(strsplit(new_file, split='.', fixed = T))[1]
print(file)
}
maps
maps <- as.matrix.data.frame(read.csv("maps.csv"))
maps <- as.matrix.data.frame(read.csv("maps.csv"))
maps
maps <- as.matrix.data.frame(read.csv("maps.csv"))
maps
dem=raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
dem = merge(dem,t)
}
}
plot(dem)
maps[1,2]
maps[2,2]
slope_sd3 = raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,2])
dem = merge(dem,t)
}
}
plot(slope_sd3)
dem=raster(maps[1,1])
slope_sd3 = raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
dem = merge(dem,t)
}
}
plot(dem)
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,2])
slope_sd3 = merge(dem,t)
}
}
plot(slope_sd3)
dev=readOGR(".",shapefile)
dem=raster(maps[1,1])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
dem = merge(dem,t)
}
}
plot(dem)
plot(t)
dem=raster(maps[1,1])
slope_sd3 = raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
plot(t)
dem = merge(dem,t)
}
}
dem=raster(maps[1,1])
slope_sd3 = raster(maps[1,2])
plot(dem)
plot(slope_sd3)
dem=raster(maps[2,1])
slope_sd3 = raster(maps[2,2])
plot(dem)
plot(slope_sd3)
maps <- as.matrix.data.frame(read.csv("maps.csv"))
maps <- as.matrix.data.frame(read.csv("maps.csv"))
dem=raster(maps[2,1])
slope_sd3 = raster(maps[2,2])
plot(dem)
plot(slope_sd3)
dem=raster(maps[1,1])
slope_sd3 = raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
plot(t)
dem = merge(dem,t)
}
}
plot(dem)
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,2])
plot(t)
slope_sd3 = merge(dem,t)
}
}
plot(slope_sd3)
plot(slope_sd3)
plot(dem)
dem=raster(maps[1,1])
slope_sd3 = raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
plot(t)
dem = merge(dem,t)
}
}
plot(dem)
if(map_length >1){
for (i in 2:nrow(maps)){
k <- raster(maps[i,2])
plot(t)
slope_sd3 = merge(dem,k)
}
}
plot(slope_sd3)
plot(maps[1,1])
maps <- as.matrix.data.frame(read.csv("maps.csv"))
plot(raste(maps[1,1]))
dem=raster(maps[1,1])
slope_sd3 = raster(maps[1,2])
plot(dem)
plot(slope_sd3)
dem=raster(maps[1,2])
slope_sd3 = raster(maps[2,2])
plot(dem)
plot(slope_sd3)
dem=raster(maps[3,1])
slope_sd3 = raster(maps[3,2])
plot(dem)
plot(slope_sd3)
dem=raster(maps[4,1])
slope_sd3 = raster(maps[4,2])
plot(dem)
plot(slope_sd3)
slope_sd3 = raster(maps[2,2])
map_length <- nrow(maps)
dem=raster(maps[2,1])
slope_sd3 = raster(maps[2,2])
plot(dem)
plot(slope_sd3)
plot(merge(dem, raste(maps[3,1])))
if(map_length >1){
for (i in 2:nrow(maps)){
k <- raster(maps[i,2])
plot(t)
slope_sd3 = merge(dem,k)
}
}
plot(slope_sd3)
if(map_length >1){
for (i in 2:nrow(maps)){
k <- raster(maps[i,2])
plot(k)
slope_sd3 = merge(dem,k)
}
}
slope_sd3 = raster(maps[1,2])
plot(slope_sd3)
slope_sd3 = raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
k <- raster(maps[i,2])
plot(k)
slope_sd3 = merge(dem,k)
}
}
plot(slope_sd3)
plot(slope_sd3)
plot(slope_sd3)
slope_sd3 = raster(maps[1,2])
plot(slope_sd3)
plot(slope_sd3)
if(map_length >1){
for (i in 2:nrow(maps)){
k <- raster(maps[i,2])
plot(k)
slope_sd3 = merge(slope_sd3,k)
}
}
plot(slope_sd3)
#make a terrain.stack of these layers:
terrain.stack_pen<-stack(list(slope=slope, aspect=aspect, slope_sd3=slope_sd3, alt=dem))
#Crop the terrain.stack by the development boundaries:
crs(dev)=crs(dem)
dem_dev <- crop(terrain.stack_pen, extent(dev), snap='out')
rar <- mask(dem_dev, dev)
srtm30a
dem
dem=raster(maps[1,1])
library(methods)
require(effects)
riskmod <- readRDS("riskmod.rds")
nests <- as.data.frame(read.csv("nests.csv"))
maps <- as.matrix.data.frame(read.csv("maps.csv"))
##### WEBSITE SIMULATION: CAPE POINT#####
require(rgdal)
require(raster)
shapefile <- "penninsula"
srtm30a<-raster("../srtm_maps/S34E018.hgt")
srtm30b<-raster("../srtm_maps/S35E018.hgt")
vect <- c(srtm30a, srtm30b)
map_length <- nrow(maps)
dem=raster(maps[1,1])
slope_sd3 = raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
dem = merge(dem,t)
}
}
if(map_length >1){
for (i in 2:nrow(maps)){
k <- raster(maps[i,2])
slope_sd3 = merge(slope_sd3,k)
}
}
dev=readOGR(".",shapefile)
#make a terrain.stack of these layers:
terrain.stack_pen<-stack(list(slope=slope, aspect=aspect, slope_sd3=slope_sd3, alt=dem))
#Crop the terrain.stack by the development boundaries:
crs(dev)=crs(dem)
dem_dev <- crop(terrain.stack_pen, extent(dev), snap='out')
rar <- mask(dem_dev, dev)
#convert the raster to points, and convert these points to a dataframe:
rarToP <- rasterToPoints(rar, byid=TRUE, id=rar$nests)
rm(rar)
dev.terrain <- as.data.frame(rarToP)
maps <- as.matrix.data.frame(read.csv("maps.csv"))
library(methods)
require(effects)
riskmod <- readRDS("riskmod.rds")
nests <- as.data.frame(read.csv("nests.csv"))
maps <- as.matrix.data.frame(read.csv("maps.csv"))
##### WEBSITE SIMULATION: CAPE POINT#####
require(rgdal)
require(raster)
shapefile <- "penninsula"
srtm30a<-raster("../srtm_maps/S34E018.hgt")
srtm30b<-raster("../srtm_maps/S35E018.hgt")
map_length <- nrow(maps)
dem=raster(maps[1,1])
slope_sd3 = raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
dem = merge(dem,t)
}
}
if(map_length >1){
for (i in 2:nrow(maps)){
k <- raster(maps[i,2])
slope_sd3 = merge(slope_sd3,k)
}
}
dev=readOGR(".",shapefile)
#make a terrain.stack of these layers:
terrain.stack_pen<-stack(list(slope=slope, aspect=aspect, slope_sd3=slope_sd3, alt=dem))
#Crop the terrain.stack by the development boundaries:
crs(dev)=crs(dem)
dem_dev <- crop(terrain.stack_pen, extent(dev), snap='out')
rar <- mask(dem_dev, dev)
#convert the raster to points, and convert these points to a dataframe:
rarToP <- rasterToPoints(rar, byid=TRUE, id=rar$nests)
rm(rar)
dev.terrain <- as.data.frame(rarToP)
#change x y column names:
names(dev.terrain)[names(dev.terrain) == "x"] <- "longitude"
names(dev.terrain)[names(dev.terrain) == "y"] <- "latitude"
#calculate the distance between the nest and each grid cell (now each row in the dataframe):
require(geosphere)
df=data.frame(long=dev.terrain$longitude, lat=dev.terrain$latitude)
nests_distance <- c()
for (i in 1:nrow(nests)){
row <- nests[i,]
lati <- paste("nest_lat", i,sep = "_")
longi <- paste("nest_long",i,sep = "_")
disti <- paste("nest_dist",i,sep="_")
nests_distance[i] <- disti
dev.terrain[lati] <- row$lat
dev.terrain[longi] = row$long
df_i <- data.frame(long=dev.terrain[longi], lat=dev.terrain[lati])
di <- distGeo(df, df_i)
di <- as.data.frame(di)
dev.terrain[disti]=di$di/1000
}
distances <- dev.terrain[,seq(9,ncol(dev.terrain),by=3)]
dev.terrain$nest_dist=apply(distances,1,FUN=min)
#add categorical aspect to dataframe:
dev.terrain$asp4<-
ifelse((dev.terrain$aspect <= 45 | dev.terrain$aspect >= 315), "N",
ifelse((dev.terrain$aspect >= 45 & dev.terrain$aspect < 125), "E",
ifelse((dev.terrain$aspect >= 125 & dev.terrain$aspect < 225), "S",
ifelse((dev.terrain$aspect >= 225 & dev.terrain$aspect < 315), "W", "NA"))))
dev.terrain$asp4=as.factor(dev.terrain$asp4)
####Data frame in now ready to run the model over:
pred<-predict(riskmod, dev.terrain, re.form = NA, type = "response", na.action = na.fail)
pred=as.data.frame(pred)
#RISK PLOT:
toplot=cbind.data.frame(long= dev.terrain$longitude, lat=dev.terrain$latitude, pred=pred$pred)
potplot <- subset.data.frame(toplot, toplot$pred >0.2)
potlist <- write.csv(potplot, "output.csv", row.names = F, col.names = F)
risk_plot=rasterFromXYZ(toplot)
colours=c("darkseagreen1","darkorange","red")
plot(risk_plot, col=colours)
rm(pred)
####Data frame in now ready to run the model over:
pred<-predict(riskmod, dev.terrain, re.form = NA, type = "response", na.action = na.fail)
pred=as.data.frame(pred)
pred=as.data.frame(pred)
#RISK PLOT:
toplot=cbind.data.frame(long= dev.terrain$longitude, lat=dev.terrain$latitude, pred=pred$pred)
potplot <- subset.data.frame(toplot, toplot$pred >0.2)
potlist <- write.csv(potplot, "output.csv", row.names = F, col.names = F)
risk_plot=rasterFromXYZ(toplot)
colours=c("darkseagreen1","darkorange","red")
plot(risk_plot, col=colours)
library(methods)
require(effects)
riskmod <- readRDS("riskmod.rds")
nests <- as.data.frame(read.csv("nests.csv"))
maps <- as.matrix.data.frame(read.csv("maps.csv"))
##### WEBSITE SIMULATION: CAPE POINT#####
require(rgdal)
require(raster)
shapefile <- "penninsula"
srtm30a<-raster("../srtm_maps/S34E018.hgt")
srtm30b<-raster("../srtm_maps/S35E018.hgt")
map_length <- nrow(maps)
dem=raster(maps[1,1])
slope_sd3 = raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
dem = merge(dem,t)
}
}
if(map_length >1){
for (i in 2:nrow(maps)){
k <- raster(maps[i,2])
slope_sd3 = merge(slope_sd3,k)
}
}
dev=readOGR(".",shapefile)
#make a terrain.stack of these layers:
terrain.stack_pen<-stack(list(slope=slope, aspect=aspect, slope_sd3=slope_sd3, alt=dem))
#Crop the terrain.stack by the development boundaries:
crs(dev)=crs(dem)
dem_dev <- crop(terrain.stack_pen, extent(dev), snap='out')
library(methods)
require(effects)
riskmod <- readRDS("riskmod.rds")
nests <- as.data.frame(read.csv("nests.csv"))
maps <- as.matrix.data.frame(read.csv("maps.csv"))
##### WEBSITE SIMULATION: CAPE POINT#####
require(rgdal)
require(raster)
shapefile <- "penninsula"
srtm30a<-raster("../srtm_maps/S34E018.hgt")
srtm30b<-raster("../srtm_maps/S35E018.hgt")
map_length <- nrow(maps)
dem=raster(maps[1,1])
slope_sd3 = raster(maps[1,2])
if(map_length >1){
for (i in 2:nrow(maps)){
t <- raster(maps[i,1])
dem = merge(dem,t)
}
}
if(map_length >1){
for (i in 2:nrow(maps)){
k <- raster(maps[i,2])
slope_sd3 = merge(slope_sd3,k)
}
}
#shapefile <- as.character(args1[1])
#srtm30a <- raster(as.character(args1[2]))
#srtm30b <- raster(as.character(args1[3]))
slope<-terrain(dem, opt=c('slope'), unit='degrees', neighbors=8)
aspect<-terrain(dem, opt=c('aspect'), unit='degrees')
dev=readOGR(".",shapefile)
slope<-terrain(dem, opt=c('slope'), unit='degrees', neighbors=8)
aspect<-terrain(dem, opt=c('aspect'), unit='degrees')
#make a terrain.stack of these layers:
terrain.stack_pen<-stack(list(slope=slope, aspect=aspect, slope_sd3=slope_sd3, alt=dem))
#Crop the terrain.stack by the development boundaries:
crs(dev)=crs(dem)
dem_dev <- crop(terrain.stack_pen, extent(dev), snap='out')
rar <- mask(dem_dev, dev)
#convert the raster to points, and convert these points to a dataframe:
rarToP <- rasterToPoints(rar, byid=TRUE, id=rar$nests)
rm(rar)
dev.terrain <- as.data.frame(rarToP)
#change x y column names:
names(dev.terrain)[names(dev.terrain) == "x"] <- "longitude"
names(dev.terrain)[names(dev.terrain) == "y"] <- "latitude"
#calculate the distance between the nest and each grid cell (now each row in the dataframe):
require(geosphere)
df=data.frame(long=dev.terrain$longitude, lat=dev.terrain$latitude)
nests_distance <- c()
for (i in 1:nrow(nests)){
row <- nests[i,]
lati <- paste("nest_lat", i,sep = "_")
longi <- paste("nest_long",i,sep = "_")
disti <- paste("nest_dist",i,sep="_")
nests_distance[i] <- disti
dev.terrain[lati] <- row$lat
dev.terrain[longi] = row$long
df_i <- data.frame(long=dev.terrain[longi], lat=dev.terrain[lati])
di <- distGeo(df, df_i)
di <- as.data.frame(di)
dev.terrain[disti]=di$di/1000
}
distances <- dev.terrain[,seq(9,ncol(dev.terrain),by=3)]
dev.terrain$nest_dist=apply(distances,1,FUN=min)
#add categorical aspect to dataframe:
dev.terrain$asp4<-
ifelse((dev.terrain$aspect <= 45 | dev.terrain$aspect >= 315), "N",
ifelse((dev.terrain$aspect >= 45 & dev.terrain$aspect < 125), "E",
ifelse((dev.terrain$aspect >= 125 & dev.terrain$aspect < 225), "S",
ifelse((dev.terrain$aspect >= 225 & dev.terrain$aspect < 315), "W", "NA"))))
dev.terrain$asp4=as.factor(dev.terrain$asp4)
####Data frame in now ready to run the model over:
pred<-predict(riskmod, dev.terrain, re.form = NA, type = "response", na.action = na.fail)
plot(dem)
plot(slope_sd3)
####Data frame in now ready to run the model over:
pred<-predict(riskmod, dev.terrain, re.form = NA, type = "response")
pred=as.data.frame(pred)
#RISK PLOT:
toplot=cbind.data.frame(long= dev.terrain$longitude, lat=dev.terrain$latitude, pred=pred$pred)
potplot <- subset.data.frame(toplot, toplot$pred >0.2)
potlist <- write.csv(potplot, "output.csv", row.names = F, col.names = F)
risk_plot=rasterFromXYZ(toplot)
colours=c("darkseagreen1","darkorange","red")
plot(risk_plot, col=colours)
source('~/Documents/CSC3003S/Capstone/BlackEagleProject/app/model_R/VERA_simulation.R', echo=TRUE)
source('~/Documents/CSC3003S/Capstone/BlackEagleProject/app/model_R/VERA_simulation.R', echo=TRUE)
library(methods)
require(effects)
##### WEBSITE SIMULATION: CAPE POINT#####
require(rgdal)
require(raster)
require(raster)
require(raster)
install.packages("lpSolve")
install.packages("lpSolveAPI")
setwd("~/Documents/CSC3003S/interviewPrep")
loans <- read.csv("loans.csv")
loans$applicant_experience
f.con <- c(loans$loan_amount)
f.con
f.con
f.obj <- c(loans$applicant_experience)
f.con <- c(loans$loan_amount)
f.dir <- c("<=")
f.rhs <- c(500000)
lp ("max", f.obj, f.con, f.dir, f.rhs)
library("lpSolve", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(lpSolve)
lp ("max", f.obj, f.con, f.dir, f.rhs)
lp ("max", f.obj, f.con, f.dir, f.rhs, int.vec = 1:30)
lp ("max", f.obj, f.con, f.dir, f.rhs, int.vec = 1:30)$solution
lp ("max", f.obj, f.con, f.dir, f.rhs, all.bin = T, num.bin.solns = 30)
lp ("max", f.obj, f.con, f.dir, f.rhs, all.bin = T, num.bin.solns = 30)$solution
lp ("max", f.obj, f.con, f.dir, f.rhs, binary.vec = 1:30)
lp ("max", f.obj, f.con, f.dir, f.rhs, binary.vec = 1:30)$solution
loans$applicant_experience
f.obj <- c(9,10,11,8,7,10,11,12,9,10,11,8,7,10,11,12,10,11,8,7,10,11,12,10,11,8,7,10,11,12)
length(f.obj)
loans$loan_amount
f.con <- c(52100, 52200, 51200,51000, 51900, 49700, 48600, 41200, 42000, 62000, 31200, 39200, 42000, 49800, 44700, 40900, 40200, 51300, 50100, 50400, 50500, 51200, 30200, 31300, 46100, 50200, 51100, 49300, 48600)
length(f.con)
loans$loan_amount
f.con <- c(52100, 52200, 51200,51000, 51900, 49700, 48600, 41200, 42000, 62000, 31200, 39200, 42000, 49800, 44700, 40900, 40200, 51300, 50100, 50200, 50400, 50500, 51200, 30200, 31300, 46100, 50200, 51100, 49300, 48600)
length(f.con)
lp ("max", f.obj, f.con, f.dir, f.rhs, binary.vec = 1:30)$solution
lp ("max", f.obj, f.con, f.dir, f.rhs, all.bin = T)$solution
lp ("max", f.obj, f.con, f.dir, f.rhs, all.bin = T)$solution
